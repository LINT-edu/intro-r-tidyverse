---
title: "Bem-vindo ao curso"
format:
  html:
    toc: true
    toc-depth: 3
execute:
  cache: true
---

# Introdução

Este é um curso introdutório ao R com foco em ciência de dados usando o pacote `tidyverse`.

Ao longo das aulas, você aprenderá:

- A base da linguagem R
- Como importar, arrumar, transformar, visualizar e modelar dados
- Como gerar relatórios reprodutíveis

Use o menu acima para navegar entre os módulos.

## Comparando linguagens

Antes de começar... 

Este documento tem como objetivo oferecer uma comparação prática entre duas das bibliotecas mais populares para manipulação de dados: `pandas` em Python e `tidyverse` em R. Utilizando o dataset clássico **Iris**, são apresentadas operações fundamentais de ciência de dados em ambas as linguagens, organizadas de forma paralela.

A proposta não é apenas mostrar como realizar tarefas específicas, mas também **facilitar a transferência de conhecimento entre linguagens**. Muitas vezes, cientistas de dados e pesquisadores se deparam com a necessidade de migrar seus fluxos de trabalho entre R e Python (ou vice-versa), seja por demanda de projetos colaborativos, requisitos institucionais ou preferência da equipe técnica.

Ao intercalar cada operação com sua respectiva implementação em R e Python, o leitor pode compreender como os conceitos se traduzem entre os ecossistemas. Essa estrutura favorece o aprendizado comparado e reforça a capacidade de raciocínio lógico ao destacar diferenças e semelhanças de sintaxe e paradigma entre as duas abordagens.

Este material pode ser útil tanto para iniciantes quanto para usuários intermediários que desejam reforçar sua fluência em múltiplas linguagens de análise de dados.

## 1. Carregar os dados

```{python}
#| eval: false
import pandas as pd
from sklearn.datasets import load_iris

iris_data = load_iris(as_frame=True)
iris = iris_data.frame
```

```{r}
#| eval: false
library(tidyverse)
data(iris)
```

## 2. Visualizar as primeiras linhas

```{python}
#| eval: false
iris.head()
```

```{r}
#| eval: false
head(iris)
```

## 3. Filtrar linhas (ex: apenas "setosa")

```{python}
#| eval: false
iris_setosa = iris[iris['target'] == 0]
iris_setosa.head()
```

```{r}
#| eval: false
iris %>% filter(Species == "setosa")
```

## 4. Selecionar colunas

```{python}
#| eval: false
iris_selected = iris[['sepal length (cm)', 'target']]
iris_selected.head()
```

```{r}
#| eval: false
iris %>% select(Sepal.Length, Species)
```

## 5. Criar nova coluna (Sepal.Area)

```{python}
#| eval: false
iris['Sepal.Area'] = iris['sepal length (cm)'] * iris['sepal width (cm)']
iris[['Sepal.Area']].head()
```

```{r}
#| eval: false
iris <- iris %>% mutate(Sepal.Area = Sepal.Length * Sepal.Width)
iris %>% select(Sepal.Area) %>% head()
```

## 6. Agrupar e resumir (média do comprimento da sépala por espécie)

```{python}
#| eval: false
mean_sepal = iris.groupby('target')['sepal length (cm)'].mean()
mean_sepal
```

```{r}
#| eval: false
iris %>% group_by(Species) %>% summarise(mean_sepal = mean(Sepal.Length))
```

## 7. Ordenar os dados

```{python}
#| eval: false
iris_sorted = iris.sort_values('sepal length (cm)', ascending=False)
iris_sorted.head()
```

```{r}
#| eval: false
iris %>% arrange(desc(Sepal.Length)) %>% head()
```

## 8. Renomear colunas

```{python}
#| eval: false
iris_renamed = iris.rename(columns={'sepal length (cm)': 'Sepal_Length'})
iris_renamed.head()
```

```{r}
#| eval: false
iris %>% rename(Sepal_Length = Sepal.Length) %>% head()
```

## 9. Pipeline completo: filtrar, criar coluna e resumir

```{python}
#| eval: false
iris_filtered = (
    iris[iris['target'] != 0]
    .assign(Sepal.Area = lambda df: df['sepal length (cm)'] * df['sepal width (cm)'])
    .groupby('target')
    .agg(mean_area = ('Sepal.Area', 'mean'))
)
iris_filtered
```

```{r}
#| eval: false

iris %>%
  filter(Species != "setosa") %>%
  mutate(Sepal.Area = Sepal.Length * Sepal.Width) %>%
  group_by(Species) %>%
  summarise(mean_area = mean(Sepal.Area))
```