[
  {
    "objectID": "material/aula03-arrumar.html",
    "href": "material/aula03-arrumar.html",
    "title": "Aula 03 – Arrumar Dados com tidyr",
    "section": "",
    "text": "Compreender o que são dados arrumados (tidy data).\nUtilizar funções do pacote tidyr para organizar dados em formato adequado para análise.\nTransformar dados amplos em longos e vice-versa com pivot_longer() e pivot_wider().\nSeparar e unir colunas com separate() e unite()."
  },
  {
    "objectID": "material/aula03-arrumar.html#objetivos-da-aula",
    "href": "material/aula03-arrumar.html#objetivos-da-aula",
    "title": "Aula 03 – Arrumar Dados com tidyr",
    "section": "",
    "text": "Compreender o que são dados arrumados (tidy data).\nUtilizar funções do pacote tidyr para organizar dados em formato adequado para análise.\nTransformar dados amplos em longos e vice-versa com pivot_longer() e pivot_wider().\nSeparar e unir colunas com separate() e unite()."
  },
  {
    "objectID": "material/aula03-arrumar.html#por-que-arrumar-os-dados",
    "href": "material/aula03-arrumar.html#por-que-arrumar-os-dados",
    "title": "Aula 03 – Arrumar Dados com tidyr",
    "section": "Por que arrumar os dados?",
    "text": "Por que arrumar os dados?\nA maior parte dos pacotes do tidyverse — como ggplot2, dplyr, purrr — pressupõe que seus dados estejam no formato tidy. Esse formato facilita operações como filtragem, visualização, modelagem e comunicação de resultados."
  },
  {
    "objectID": "material/aula03-arrumar.html#carregando-pacotes-necessários",
    "href": "material/aula03-arrumar.html#carregando-pacotes-necessários",
    "title": "Aula 03 – Arrumar Dados com tidyr",
    "section": "Carregando pacotes necessários",
    "text": "Carregando pacotes necessários\nNesta etapa, carregamos os pacotes essenciais para trabalhar com dados no estilo tidy. O tidyverse engloba tanto o tidyr, que será o foco da aula, quanto pacotes auxiliares como dplyr e ggplot2.\n\nlibrary(tidyverse)  # carrega tidyr, dplyr, ggplot2, etc."
  },
  {
    "objectID": "material/aula03-arrumar.html#estrutura-comum-de-dados-desarrumados",
    "href": "material/aula03-arrumar.html#estrutura-comum-de-dados-desarrumados",
    "title": "Aula 03 – Arrumar Dados com tidyr",
    "section": "Estrutura comum de dados desarrumados",
    "text": "Estrutura comum de dados desarrumados\nAntes de aprender a arrumar os dados, é importante reconhecer como se apresentam conjuntos de dados desorganizados. Esta seção discute os padrões mais comuns de dados desarrumados e por que eles dificultam a análise. Aqui alguns padrões para reconhecer formatos “desarrumados”, como:\n\nDados com valores em nomes de colunas;\nMúltiplas variáveis em uma única coluna;\nObservações espalhadas em várias tabelas."
  },
  {
    "objectID": "material/aula03-arrumar.html#transformando-dados-amplos-em-longos-com-pivot_longer",
    "href": "material/aula03-arrumar.html#transformando-dados-amplos-em-longos-com-pivot_longer",
    "title": "Aula 03 – Arrumar Dados com tidyr",
    "section": "Transformando dados amplos em longos com pivot_longer()",
    "text": "Transformando dados amplos em longos com pivot_longer()\nAgora vamos aprender a transformar dados em formato “amplo” (com variáveis nos nomes das colunas) para o formato “longo” — o formato ideal para a maioria das análises e visualizações no tidyverse.\nVamos usar um exemplo em que temos colunas representando diferentes anos e queremos reorganizá-las em formato longo.\n\nwide_data &lt;- tibble(\n  estado = c(\"SP\", \"RJ\", \"MG\"),\n  `2020` = c(100, 80, 90),\n  `2021` = c(110, 85, 95)\n)\n\nlong_data &lt;- wide_data %&gt;%\n  pivot_longer(\n    cols = c(`2020`, `2021`),\n    names_to = \"ano\",\n    values_to = \"valor\"\n  )"
  },
  {
    "objectID": "material/aula03-arrumar.html#transformando-dados-longos-em-amplos-com-pivot_wider",
    "href": "material/aula03-arrumar.html#transformando-dados-longos-em-amplos-com-pivot_wider",
    "title": "Aula 03 – Arrumar Dados com tidyr",
    "section": "Transformando dados longos em amplos com pivot_wider()",
    "text": "Transformando dados longos em amplos com pivot_wider()\nÀs vezes é útil inverter a operação anterior, convertendo dados do formato longo para o formato amplo — por exemplo, ao gerar tabelas para relatórios ou comparações visuais lado a lado.\nAgora fazemos o caminho inverso, útil por exemplo para gerar tabelas.\n\nwide_again &lt;- long_data %&gt;%\n  pivot_wider(\n    names_from = ano,\n    values_from = valor\n  )\n\n\n\n\n\n\n\nNote\n\n\n\nO operador %&gt;%, conhecido como pipe, é utilizado para encadear funções em R de forma legível. Ele permite passar o resultado de uma expressão como primeiro argumento da próxima função."
  },
  {
    "objectID": "material/aula03-arrumar.html#separando-colunas-com-separate",
    "href": "material/aula03-arrumar.html#separando-colunas-com-separate",
    "title": "Aula 03 – Arrumar Dados com tidyr",
    "section": "Separando colunas com separate()",
    "text": "Separando colunas com separate()\nQuando uma única coluna contém mais de uma variável combinada (por exemplo, “nome-idade”), podemos separá-la em múltiplas colunas usando a função separate().\n\ndf &lt;- tibble(pessoa = c(\"Joao-25\", \"Maria-30\"))\n\ndf_sep &lt;- df %&gt;%\n  separate(pessoa, into = c(\"nome\", \"idade\"), sep = \"-\")"
  },
  {
    "objectID": "material/aula03-arrumar.html#unindo-colunas-com-unite",
    "href": "material/aula03-arrumar.html#unindo-colunas-com-unite",
    "title": "Aula 03 – Arrumar Dados com tidyr",
    "section": "Unindo colunas com unite()",
    "text": "Unindo colunas com unite()\nO oposto da separação: se quisermos combinar duas ou mais colunas em uma só (por exemplo, reconstruir “nome-idade”), utilizamos a função unite().\n\ndf_unido &lt;- df_sep %&gt;%\n  unite(\"pessoa\", nome, idade, sep = \"-\")"
  },
  {
    "objectID": "material/aula03-arrumar.html#exercícios",
    "href": "material/aula03-arrumar.html#exercícios",
    "title": "Aula 03 – Arrumar Dados com tidyr",
    "section": "Exercícios",
    "text": "Exercícios\nEstes exercícios reforçam o conteúdo abordado, permitindo aplicar pivot_longer(), pivot_wider(), separate() e unite() em situações práticas.\n\nConverta um conjunto de dados amplo para o formato longo usando pivot_longer().\nFaça a operação inversa com pivot_wider().\nUse separate() para dividir uma coluna composta.\nUse unite() para reconstruí-la."
  },
  {
    "objectID": "material/aula05-visualizar.html",
    "href": "material/aula05-visualizar.html",
    "title": "Aula 05 – Visualizar Dados com ggplot2",
    "section": "",
    "text": "Compreender os princípios da gramática dos gráficos implementada no ggplot2.\nConstruir visualizações com ggplot(), mapeando variáveis estéticas.\nAdicionar camadas como geom_point(), geom_bar(), geom_line().\nPersonalizar rótulos, cores, escalas e temas gráficos."
  },
  {
    "objectID": "material/aula05-visualizar.html#objetivos-da-aula",
    "href": "material/aula05-visualizar.html#objetivos-da-aula",
    "title": "Aula 05 – Visualizar Dados com ggplot2",
    "section": "",
    "text": "Compreender os princípios da gramática dos gráficos implementada no ggplot2.\nConstruir visualizações com ggplot(), mapeando variáveis estéticas.\nAdicionar camadas como geom_point(), geom_bar(), geom_line().\nPersonalizar rótulos, cores, escalas e temas gráficos."
  },
  {
    "objectID": "material/aula05-visualizar.html#introdução",
    "href": "material/aula05-visualizar.html#introdução",
    "title": "Aula 05 – Visualizar Dados com ggplot2",
    "section": "Introdução",
    "text": "Introdução\nA criação de gráficos no ggplot2 segue a lógica da gramática dos gráficos (grammar of graphics), onde gráficos são construídos camada por camada.\nEssa abordagem modular permite construir visualizações complexas de forma controlada e transparente."
  },
  {
    "objectID": "material/aula05-visualizar.html#carregando-pacotes-necessários",
    "href": "material/aula05-visualizar.html#carregando-pacotes-necessários",
    "title": "Aula 05 – Visualizar Dados com ggplot2",
    "section": "Carregando pacotes necessários",
    "text": "Carregando pacotes necessários\nO pacote ggplot2 já está incluído no tidyverse.\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "material/aula05-visualizar.html#conhecendo-a-estrutura-de-ggplot",
    "href": "material/aula05-visualizar.html#conhecendo-a-estrutura-de-ggplot",
    "title": "Aula 05 – Visualizar Dados com ggplot2",
    "section": "Conhecendo a estrutura de ggplot()",
    "text": "Conhecendo a estrutura de ggplot()\nA função ggplot() serve como ponto de partida, onde definimos os dados e os mapeamentos estéticos — isto é, quais variáveis serão representadas nos eixos ou em outras propriedades visuais.\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy))"
  },
  {
    "objectID": "material/aula05-visualizar.html#adicionando-camadas-com",
    "href": "material/aula05-visualizar.html#adicionando-camadas-com",
    "title": "Aula 05 – Visualizar Dados com ggplot2",
    "section": "Adicionando camadas com +",
    "text": "Adicionando camadas com +\nAs camadas (geoms) definem o tipo de gráfico. Abaixo, criamos um gráfico de dispersão com geom_point().\n\nggplot(data = mpg, aes(x = displ, y = hwy)) +\n  geom_point()"
  },
  {
    "objectID": "material/aula05-visualizar.html#mapeando-variáveis-estéticas",
    "href": "material/aula05-visualizar.html#mapeando-variáveis-estéticas",
    "title": "Aula 05 – Visualizar Dados com ggplot2",
    "section": "Mapeando variáveis estéticas",
    "text": "Mapeando variáveis estéticas\nMapear variáveis para cor, forma ou tamanho adiciona dimensão à visualização.\n\nggplot(mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point()"
  },
  {
    "objectID": "material/aula05-visualizar.html#gráficos-de-barras-com-geom_bar",
    "href": "material/aula05-visualizar.html#gráficos-de-barras-com-geom_bar",
    "title": "Aula 05 – Visualizar Dados com ggplot2",
    "section": "Gráficos de barras com geom_bar()",
    "text": "Gráficos de barras com geom_bar()\nO geom_bar() pode ser usado de duas formas: com contagem automática ou com stat = \"identity\" quando os valores já estão agregados.\n\nggplot(mpg, aes(x = class)) +\n  geom_bar()"
  },
  {
    "objectID": "material/aula05-visualizar.html#gráficos-de-linhas-com-geom_line",
    "href": "material/aula05-visualizar.html#gráficos-de-linhas-com-geom_line",
    "title": "Aula 05 – Visualizar Dados com ggplot2",
    "section": "Gráficos de linhas com geom_line()",
    "text": "Gráficos de linhas com geom_line()\nUsado principalmente para séries temporais ou relações contínuas ordenadas.\n\ndata &lt;- tibble(tempo = 1:10, valor = cumsum(rnorm(10)))\n\nggplot(data, aes(x = tempo, y = valor)) +\n  geom_line()"
  },
  {
    "objectID": "material/aula05-visualizar.html#personalizando-o-gráfico-títulos-cores-e-temas",
    "href": "material/aula05-visualizar.html#personalizando-o-gráfico-títulos-cores-e-temas",
    "title": "Aula 05 – Visualizar Dados com ggplot2",
    "section": "Personalizando o gráfico: títulos, cores e temas",
    "text": "Personalizando o gráfico: títulos, cores e temas\nPodemos adicionar rótulos, modificar escalas e aplicar temas para tornar os gráficos mais informativos e estéticos.\n\nggplot(mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point() +\n  labs(title = \"Eficiência por tipo de carro\",\n       x = \"Tamanho do motor (L)\",\n       y = \"MPG rodovia\",\n       color = \"Classe\") +\n  theme_minimal()"
  },
  {
    "objectID": "material/aula05-visualizar.html#exercícios",
    "href": "material/aula05-visualizar.html#exercícios",
    "title": "Aula 05 – Visualizar Dados com ggplot2",
    "section": "Exercícios",
    "text": "Exercícios\n\nCrie um gráfico de dispersão de mpg com hwy vs. displ.\nMapeie a variável drv na cor dos pontos.\nCrie um gráfico de barras com a contagem de veículos por class.\nGere um gráfico de linhas com dados simulados de série temporal.\nAplique um tema diferente ao gráfico e adicione título e rótulos."
  },
  {
    "objectID": "material/aula01-introducao-r.html",
    "href": "material/aula01-introducao-r.html",
    "title": "Aula 01 – Introdução ao R",
    "section": "",
    "text": "Explorar os fundamentos da linguagem R com profundidade conceitual.\nCompreender a estrutura de objetos, vetores e funções no R.\nTrabalhar com listas e data frames, reconhecendo suas estruturas e coerções.\nEntender como o ambiente do R é organizado para análise reprodutível."
  },
  {
    "objectID": "material/aula01-introducao-r.html#objetivos-da-aula",
    "href": "material/aula01-introducao-r.html#objetivos-da-aula",
    "title": "Aula 01 – Introdução ao R",
    "section": "",
    "text": "Explorar os fundamentos da linguagem R com profundidade conceitual.\nCompreender a estrutura de objetos, vetores e funções no R.\nTrabalhar com listas e data frames, reconhecendo suas estruturas e coerções.\nEntender como o ambiente do R é organizado para análise reprodutível."
  },
  {
    "objectID": "material/aula01-introducao-r.html#o-que-é-r-e-rstudio",
    "href": "material/aula01-introducao-r.html#o-que-é-r-e-rstudio",
    "title": "Aula 01 – Introdução ao R",
    "section": "O que é R e RStudio?",
    "text": "O que é R e RStudio?\nO R é uma linguagem de programação orientada a análise de dados, estatística e visualização gráfica. Ele é interpretado, fortemente tipado e vetorizado por padrão. O RStudio é um ambiente de desenvolvimento integrado (IDE) que facilita a organização e execução de projetos em R."
  },
  {
    "objectID": "material/aula01-introducao-r.html#o-r-como-linguagem-interpretada-e-vetorizada",
    "href": "material/aula01-introducao-r.html#o-r-como-linguagem-interpretada-e-vetorizada",
    "title": "Aula 01 – Introdução ao R",
    "section": "O R como linguagem interpretada e vetorizada",
    "text": "O R como linguagem interpretada e vetorizada\nA seguir, apresentamos operações aritméticas básicas e vetorizadas que mostram como o R interpreta e processa expressões matemáticas.\n\n1 + 1\n(5 + 3) / 2\n4 ^ 2\n\nA vetorização é uma das características mais poderosas do R. Este bloco mostra como operações são aplicadas a vetores de forma eficiente.\n\nx &lt;- c(1, 2, 3)\nx * 2\nx + c(10, 20, 30)\n\nEste exemplo mostra como o R lida com vetores de tamanhos diferentes usando reciclagem de valores.\n\nc(1, 2) + c(10, 20, 30, 40)\n\n\n\n\n\n\n\nNote\n\n\n\nO R realiza reciclagem de vetores quando os comprimentos não são múltiplos. Isso pode causar erros silenciosos."
  },
  {
    "objectID": "material/aula01-introducao-r.html#criando-objetos-e-entendendo-tipos",
    "href": "material/aula01-introducao-r.html#criando-objetos-e-entendendo-tipos",
    "title": "Aula 01 – Introdução ao R",
    "section": "Criando Objetos e entendendo Tipos",
    "text": "Criando Objetos e entendendo Tipos\nNeste bloco, mostramos como criar objetos em R e verificar seus tipos usando a função class().\n\na &lt;- 5\nb &lt;- \"texto\"\nc &lt;- TRUE\nclass(a)\nclass(b)\nclass(c)\n\nAqui vemos como o R trata diferentes tipos de dados dentro de um vetor, aplicando coerção automática.\n\ncoerced &lt;- c(1, \"a\", TRUE)\ncoerced\nclass(coerced)\n\n\n\n\n\n\n\nNote\n\n\n\nCoerção é o processo pelo qual o R converte automaticamente os tipos de dados de um vetor para um tipo comum, sempre que necessário. Isso ocorre porque vetores são homogêneos: todos os seus elementos devem ser do mesmo tipo. Quando há mistura de tipos, o R aplica regras de coerção, convertendo todos os elementos para o tipo mais genérico que possa representar todos os valores presentes.\nA hierarquia de coerção no R segue a ordem: logical &lt; integer &lt; double &lt; character. Portanto, se misturarmos números e textos, o vetor será convertido para character, pois é o tipo mais abrangente."
  },
  {
    "objectID": "material/aula01-introducao-r.html#vetores",
    "href": "material/aula01-introducao-r.html#vetores",
    "title": "Aula 01 – Introdução ao R",
    "section": "Vetores",
    "text": "Vetores\nApresentamos aqui como criar vetores de diferentes tipos: numéricos, caracteres e lógicos.\n\nv1 &lt;- c(10, 20, 30)\nv2 &lt;- c(\"A\", \"B\", \"C\")\nv3 &lt;- c(TRUE, FALSE, TRUE)\n\nMostramos como acessar elementos de um vetor e como atribuir nomes aos elementos para facilitar a leitura.\n\nv1[1]\nv2[1:2]\nnames(v1) &lt;- c(\"João\", \"Maria\", \"Pedro\")\nv1[\"Maria\"]"
  },
  {
    "objectID": "material/aula01-introducao-r.html#funções-e-argumentos",
    "href": "material/aula01-introducao-r.html#funções-e-argumentos",
    "title": "Aula 01 – Introdução ao R",
    "section": "Funções e Argumentos",
    "text": "Funções e Argumentos\nEste bloco mostra como utilizar funções básicas em R, passar argumentos e interpretar o retorno.\n\nmedia &lt;- mean(v1)\nlog10(media)\nmean(v1, trim = 0.1)"
  },
  {
    "objectID": "material/aula01-introducao-r.html#listas-objetos-heterogêneos-e-estruturados",
    "href": "material/aula01-introducao-r.html#listas-objetos-heterogêneos-e-estruturados",
    "title": "Aula 01 – Introdução ao R",
    "section": "Listas: objetos heterogêneos e estruturados",
    "text": "Listas: objetos heterogêneos e estruturados\nEste bloco demonstra a criação de listas, que permitem agrupar diferentes tipos de dados em uma única estrutura.\n\nminha_lista &lt;- list(\n  nome = \"Ana\",\n  idade = 28,\n  notas = c(9.5, 8.3, 7.9),\n  aprovado = TRUE\n)\n\nMostramos como acessar os elementos de uma lista utilizando diferentes sintaxes e como inspecionar sua estrutura.\n\nminha_lista$nome\nminha_lista[[\"idade\"]]\nminha_lista[\"notas\"]\nstr(minha_lista)\n\nExemplo de listas aninhadas, com acesso a elementos em subníveis.\n\nlista_aninhada &lt;- list(\n  aluno = minha_lista,\n  turma = \"Biologia\",\n  extra = list(projeto = \"Estatística\", nota_final = 9.8)\n)\nlista_aninhada$extra$nota_final\n\n[1] 9.8"
  },
  {
    "objectID": "material/aula01-introducao-r.html#data-frames",
    "href": "material/aula01-introducao-r.html#data-frames",
    "title": "Aula 01 – Introdução ao R",
    "section": "Data Frames",
    "text": "Data Frames\nA seguir, criamos um data.frame, a principal estrutura para armazenar dados tabulares em R.\n\ndf &lt;- data.frame(\n  nome = c(\"Ana\", \"Bruno\", \"Carlos\"),\n  idade = c(28, 35, 31),\n  aprovado = c(TRUE, TRUE, FALSE)\n)\n\ndf\n\n    nome idade aprovado\n1    Ana    28     TRUE\n2  Bruno    35     TRUE\n3 Carlos    31    FALSE\n\n\nExploramos a estrutura do data.frame, como acessar colunas, linhas e tipos de variáveis com str() e sapply().\n\nstr(df)\n\n'data.frame':   3 obs. of  3 variables:\n $ nome    : chr  \"Ana\" \"Bruno\" \"Carlos\"\n $ idade   : num  28 35 31\n $ aprovado: logi  TRUE TRUE FALSE\n\ndf$idade\n\n[1] 28 35 31\n\ndf[1, ]\n\n  nome idade aprovado\n1  Ana    28     TRUE\n\ndf[1:2, \"nome\"]\n\n[1] \"Ana\"   \"Bruno\"\n\nsapply(df, class)\n\n       nome       idade    aprovado \n\"character\"   \"numeric\"   \"logical\""
  },
  {
    "objectID": "material/aula01-introducao-r.html#dúvidas-frequentes-de-iniciantes",
    "href": "material/aula01-introducao-r.html#dúvidas-frequentes-de-iniciantes",
    "title": "Aula 01 – Introdução ao R",
    "section": "Dúvidas Frequentes de Iniciantes",
    "text": "Dúvidas Frequentes de Iniciantes\n\nQual a diferença entre = e &lt;-?\nAmbos operadores podem ser usados para atribuição de valores a objetos, mas &lt;- é o operador preferido na comunidade R, por tornar o código mais legível e por evitar confusões com argumentos nomeados dentro de funções.\nPor que o R mostra um + no console?\nIsso ocorre quando você começa uma expressão incompleta. O + indica que o R está aguardando o restante da linha para finalizar o comando. Exemplo: digitar mean( sem fechar o parêntese resultará nisso.\nComo salvar o ambiente de trabalho?\nEvite depender do salvamento automático de objetos. Prefira salvar scripts (.R ou .Rmd) e reexecutar seu código. Isso melhora a reprodutibilidade e evita acúmulo de objetos obsoletos na memória.\nData frames são listas?\nSim. Um data.frame é tecnicamente uma lista onde cada elemento (coluna) é um vetor da mesma extensão. Essa estrutura permite que colunas tenham tipos diferentes, mas exige consistência no número de linhas."
  },
  {
    "objectID": "material/aula01-introducao-r.html#como-pedir-ajuda-no-r",
    "href": "material/aula01-introducao-r.html#como-pedir-ajuda-no-r",
    "title": "Aula 01 – Introdução ao R",
    "section": "Como Pedir Ajuda no R?",
    "text": "Como Pedir Ajuda no R?\nEste bloco mostra formas de acessar ajuda interna no R e consultar vignettes.\n\n?mean\nargs(log)\nvignette(package = \"ggplot2\")"
  },
  {
    "objectID": "material/aula01-introducao-r.html#exercícios",
    "href": "material/aula01-introducao-r.html#exercícios",
    "title": "Aula 01 – Introdução ao R",
    "section": "Exercícios",
    "text": "Exercícios\nVetores e estatísticas básicas\n1. Crie um vetor numérico com 10 valores aleatórios e calcule a média, mediana e desvio padrão.\nTipos e coerção\n2. Crie um vetor misto e verifique o tipo resultante. Interprete a coerção.\nData Frames\n3. Monte um data.frame com colunas nome, idade, sexo, altura e aprovado. 4. Use str() e sapply() para inspecionar seu data.frame.\n\n\nFóruns úteis:\n\ndiscourse\nStackoverflow\nR-Ladies"
  },
  {
    "objectID": "material/desafio01-barplot_expressao.html",
    "href": "material/desafio01-barplot_expressao.html",
    "title": "Desafio 01 – Gráfico de expressão gênica",
    "section": "",
    "text": "Desenvolver um script em R que, dado um identificador de gene (Ensembl ID), gere automaticamente um gráfico de barras representando os níveis de expressão (em TPM) desse gene em diferentes subáreas do cérebro humano, utilizando dados da plataforma Human Protein Atlas."
  },
  {
    "objectID": "material/desafio01-barplot_expressao.html#objetivo",
    "href": "material/desafio01-barplot_expressao.html#objetivo",
    "title": "Desafio 01 – Gráfico de expressão gênica",
    "section": "",
    "text": "Desenvolver um script em R que, dado um identificador de gene (Ensembl ID), gere automaticamente um gráfico de barras representando os níveis de expressão (em TPM) desse gene em diferentes subáreas do cérebro humano, utilizando dados da plataforma Human Protein Atlas."
  },
  {
    "objectID": "material/desafio01-barplot_expressao.html#requisitos-técnicos",
    "href": "material/desafio01-barplot_expressao.html#requisitos-técnicos",
    "title": "Desafio 01 – Gráfico de expressão gênica",
    "section": "Requisitos Técnicos",
    "text": "Requisitos Técnicos\n\nUtilizar os pacotes tidyverse, especialmente ggplot2, para manipulação e visualização dos dados.\nO script deve aceitar como entrada um Ensembl Gene ID (por exemplo, ENSG00000146648 para o gene EGFR).\nA saída deve ser um gráfico de barras onde:\n\nO eixo X representa as subáreas do cérebro (por exemplo, córtex cerebral, cerebelo, hipotálamo).\nO eixo Y representa os níveis de expressão em TPM (Transcripts Per Million).\n\nO gráfico deve ser estilizado de forma clara e informativa, semelhante aos gráficos apresentados na plataforma Human Protein Atlas. Ver exemplo, aqui."
  },
  {
    "objectID": "material/desafio01-barplot_expressao.html#instruções-para-obtenção-dos-dados",
    "href": "material/desafio01-barplot_expressao.html#instruções-para-obtenção-dos-dados",
    "title": "Desafio 01 – Gráfico de expressão gênica",
    "section": "Instruções para Obtenção dos Dados",
    "text": "Instruções para Obtenção dos Dados\n\nAcesse o portal a pagina Human Protein Atlas – Brain Atlas.\nClique em rna_brain_region_hpa.tsv.zip.\nExtrai o arquivo dentro da pasta data.\nCarregue o arquivo no R com:\n\n\nlibrary(readr)\n\n# Substitua o caminho conforme necessário\nbrain_data &lt;- read_tsv(here::here(\"data/rna_brain_region_hpa.tsv\"))\n\n\n\n\nGene\nGene name\nBrain region\nTPM\npTPM\nnTPM\n\n\n\n\nENSG00000000003\nTSPAN6\namygdala\n4.5\n6.1\n7.0\n\n\nENSG00000000003\nTSPAN6\nbasal ganglia\n6.8\n10.2\n7.6\n\n\nENSG00000000003\nTSPAN6\ncerebellum\n6.5\n9.2\n7.2\n\n\nENSG00000000003\nTSPAN6\ncerebral cortex\n4.4\n6.7\n5.6\n\n\nENSG00000000003\nTSPAN6\nchoroid plexus\n26.8\n34.9\n48.2\n\n\n…\n…\n…\n…\n…\n…"
  },
  {
    "objectID": "material/desafio01-barplot_expressao.html#entregáveis",
    "href": "material/desafio01-barplot_expressao.html#entregáveis",
    "title": "Desafio 01 – Gráfico de expressão gênica",
    "section": "Entregáveis",
    "text": "Entregáveis\n\nScript R (expressao_gene_cerebro.R): Script funcional que realiza as seguintes etapas:\n\nRecebe um o identificador como entrada.\nObtém os dados de expressão gênica correspondentes às subáreas do cérebro humano.\nGera e salva um gráfico de barras representando os níveis de expressão.\n\nGráfico de Exemplo: Imagem do gráfico gerado para um gene de exemplo (por exemplo, EGFR), salva em formato PNG ou PDF."
  },
  {
    "objectID": "material/desafio01-barplot_expressao.html#dicas",
    "href": "material/desafio01-barplot_expressao.html#dicas",
    "title": "Desafio 01 – Gráfico de expressão gênica",
    "section": "Dicas",
    "text": "Dicas\n\nCertifique-se de que os dados estão no formato adequado para o ggplot2.\nPara garantir a reprodutibilidade, inclua no script a instalação e carregamento dos pacotes necessários.(Bioconductor, Stack Overflow)"
  },
  {
    "objectID": "material/aula06-visualizar_avancado.html",
    "href": "material/aula06-visualizar_avancado.html",
    "title": "Aula 06 – Visualizações Estatísticas com ggpubr e pheatmap",
    "section": "",
    "text": "Utilizar o pacote ggpubr para criar gráficos estatísticos com testes automáticos.\nAnotar comparações em boxplots e visualizações com significância.\nCriar heatmaps personalizados com o pacote pheatmap.\nAdicionar anotações, escalas e agrupamentos hierárquicos nos mapas de calor."
  },
  {
    "objectID": "material/aula06-visualizar_avancado.html#objetivos-da-aula",
    "href": "material/aula06-visualizar_avancado.html#objetivos-da-aula",
    "title": "Aula 06 – Visualizações Estatísticas com ggpubr e pheatmap",
    "section": "",
    "text": "Utilizar o pacote ggpubr para criar gráficos estatísticos com testes automáticos.\nAnotar comparações em boxplots e visualizações com significância.\nCriar heatmaps personalizados com o pacote pheatmap.\nAdicionar anotações, escalas e agrupamentos hierárquicos nos mapas de calor."
  },
  {
    "objectID": "material/aula06-visualizar_avancado.html#introdução",
    "href": "material/aula06-visualizar_avancado.html#introdução",
    "title": "Aula 06 – Visualizações Estatísticas com ggpubr e pheatmap",
    "section": "Introdução",
    "text": "Introdução\nNesta aula, vamos explorar duas ferramentas poderosas para visualização de dados estatísticos:\n\nggpubr: extensão do ggplot2 voltada para gráficos estatísticos prontos para publicação.\npheatmap: criação de heatmaps com suporte a agrupamentos, escalas e anotações laterais.\n\nEsses pacotes são amplamente utilizados em análises exploratórias, estudos de expressão gênica e relatórios científicos."
  },
  {
    "objectID": "material/aula06-visualizar_avancado.html#carregando-os-pacotes-necessários",
    "href": "material/aula06-visualizar_avancado.html#carregando-os-pacotes-necessários",
    "title": "Aula 06 – Visualizações Estatísticas com ggpubr e pheatmap",
    "section": "Carregando os pacotes necessários",
    "text": "Carregando os pacotes necessários\n\ninstall.packages(\"ggpubr\")\ninstall.packages(\"pheatmap\")\n\nlibrary(ggpubr)\nlibrary(pheatmap)\nlibrary(tidyverse)"
  },
  {
    "objectID": "material/aula06-visualizar_avancado.html#criando-boxplots-com-ggpubr",
    "href": "material/aula06-visualizar_avancado.html#criando-boxplots-com-ggpubr",
    "title": "Aula 06 – Visualizações Estatísticas com ggpubr e pheatmap",
    "section": "Criando boxplots com ggpubr",
    "text": "Criando boxplots com ggpubr\nO ggpubr simplifica a criação de boxplots com testes estatísticos embutidos.\n\ndata(mtcars)\nmtcars$cyl &lt;- as.factor(mtcars$cyl)\n\nggboxplot(mtcars, x = \"cyl\", y = \"mpg\",\n          color = \"cyl\", palette = \"jco\",\n          add = \"jitter\") +\n  stat_compare_means(method = \"anova\")"
  },
  {
    "objectID": "material/aula06-visualizar_avancado.html#comparações-par-a-par-com-stat_compare_means",
    "href": "material/aula06-visualizar_avancado.html#comparações-par-a-par-com-stat_compare_means",
    "title": "Aula 06 – Visualizações Estatísticas com ggpubr e pheatmap",
    "section": "Comparações par a par com stat_compare_means()",
    "text": "Comparações par a par com stat_compare_means()\nVocê pode adicionar comparações específicas entre grupos com pares definidos manualmente:\n\nmy_comparisons &lt;- list(c(\"4\", \"6\"), c(\"4\", \"8\"), c(\"6\", \"8\"))\n\nggboxplot(mtcars, x = \"cyl\", y = \"mpg\",\n          color = \"cyl\", palette = \"jco\") +\n  stat_compare_means(comparisons = my_comparisons) +\n  stat_compare_means(label.y = 35)  # p-valor geral (ANOVA)"
  },
  {
    "objectID": "material/aula06-visualizar_avancado.html#criando-um-heatmap-com-pheatmap",
    "href": "material/aula06-visualizar_avancado.html#criando-um-heatmap-com-pheatmap",
    "title": "Aula 06 – Visualizações Estatísticas com ggpubr e pheatmap",
    "section": "Criando um heatmap com pheatmap",
    "text": "Criando um heatmap com pheatmap\nVamos gerar um heatmap a partir de uma matriz de valores numéricos (como expressão gênica simulada).\n\nset.seed(123)\nmat &lt;- matrix(rnorm(100), nrow = 10)\nrownames(mat) &lt;- paste0(\"Gene\", 1:10)\ncolnames(mat) &lt;- paste0(\"Sample\", 1:10)\n\npheatmap(mat, scale = \"row\")"
  },
  {
    "objectID": "material/aula06-visualizar_avancado.html#adicionando-anotação-de-grupos",
    "href": "material/aula06-visualizar_avancado.html#adicionando-anotação-de-grupos",
    "title": "Aula 06 – Visualizações Estatísticas com ggpubr e pheatmap",
    "section": "Adicionando anotação de grupos",
    "text": "Adicionando anotação de grupos\nPodemos incluir informações como grupos de amostras ou tipos de condição experimental.\n\nannotation_col &lt;- data.frame(\n  Condition = rep(c(\"Control\", \"Treatment\"), each = 5)\n)\nrownames(annotation_col) &lt;- colnames(mat)\n\npheatmap(mat, scale = \"row\", annotation_col = annotation_col)"
  },
  {
    "objectID": "material/aula06-visualizar_avancado.html#personalizando-o-heatmap",
    "href": "material/aula06-visualizar_avancado.html#personalizando-o-heatmap",
    "title": "Aula 06 – Visualizações Estatísticas com ggpubr e pheatmap",
    "section": "Personalizando o heatmap",
    "text": "Personalizando o heatmap\nO pheatmap permite personalizar cores, títulos, clustering e outros aspectos visuais.\n\npheatmap(mat,\n         scale = \"row\",\n         annotation_col = annotation_col,\n         color = colorRampPalette(c(\"blue\", \"white\", \"red\"))(50),\n         clustering_distance_rows = \"euclidean\",\n         clustering_method = \"complete\")"
  },
  {
    "objectID": "material/aula06-visualizar_avancado.html#exercícios",
    "href": "material/aula06-visualizar_avancado.html#exercícios",
    "title": "Aula 06 – Visualizações Estatísticas com ggpubr e pheatmap",
    "section": "Exercícios",
    "text": "Exercícios\n\nReproduza um boxplot com ggboxplot() comparando mpg entre grupos de cyl.\nAdicione comparações manuais entre pares com stat_compare_means().\nSimule uma matriz de expressão e crie um pheatmap com escala por linha.\nAdicione uma anotação de grupo de amostras.\nExperimente diferentes métodos de clusterização e paletas de cores."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bem-vindo ao curso",
    "section": "",
    "text": "Este é um curso introdutório ao R com foco em ciência de dados usando o pacote tidyverse.\nAo longo das aulas, você aprenderá:\n\nA base da linguagem R\nComo importar, arrumar, transformar, visualizar e modelar dados\nComo gerar relatórios reprodutíveis\n\nUse o menu acima para navegar entre os módulos.\n\n\nAntes de começar…\nEste documento tem como objetivo oferecer uma comparação prática entre duas das bibliotecas mais populares para manipulação de dados: pandas em Python e tidyverse em R. Utilizando o dataset clássico Iris, são apresentadas operações fundamentais de ciência de dados em ambas as linguagens, organizadas de forma paralela.\nA proposta não é apenas mostrar como realizar tarefas específicas, mas também facilitar a transferência de conhecimento entre linguagens. Muitas vezes, cientistas de dados e pesquisadores se deparam com a necessidade de migrar seus fluxos de trabalho entre R e Python (ou vice-versa), seja por demanda de projetos colaborativos, requisitos institucionais ou preferência da equipe técnica.\nAo intercalar cada operação com sua respectiva implementação em R e Python, o leitor pode compreender como os conceitos se traduzem entre os ecossistemas. Essa estrutura favorece o aprendizado comparado e reforça a capacidade de raciocínio lógico ao destacar diferenças e semelhanças de sintaxe e paradigma entre as duas abordagens.\nEste material pode ser útil tanto para iniciantes quanto para usuários intermediários que desejam reforçar sua fluência em múltiplas linguagens de análise de dados.\n\n\n\n\nimport pandas as pd\nfrom sklearn.datasets import load_iris\n\niris_data = load_iris(as_frame=True)\niris = iris_data.frame\n\n\nlibrary(tidyverse)\ndata(iris)\n\n\n\n\n\niris.head()\n\n\nhead(iris)\n\n\n\n\n\niris_setosa = iris[iris['target'] == 0]\niris_setosa.head()\n\n\niris %&gt;% filter(Species == \"setosa\")\n\n\n\n\n\niris_selected = iris[['sepal length (cm)', 'target']]\niris_selected.head()\n\n\niris %&gt;% select(Sepal.Length, Species)\n\n\n\n\n\niris['Sepal.Area'] = iris['sepal length (cm)'] * iris['sepal width (cm)']\niris[['Sepal.Area']].head()\n\n\niris &lt;- iris %&gt;% mutate(Sepal.Area = Sepal.Length * Sepal.Width)\niris %&gt;% select(Sepal.Area) %&gt;% head()\n\n\n\n\n\nmean_sepal = iris.groupby('target')['sepal length (cm)'].mean()\nmean_sepal\n\n\niris %&gt;% group_by(Species) %&gt;% summarise(mean_sepal = mean(Sepal.Length))\n\n\n\n\n\niris_sorted = iris.sort_values('sepal length (cm)', ascending=False)\niris_sorted.head()\n\n\niris %&gt;% arrange(desc(Sepal.Length)) %&gt;% head()\n\n\n\n\n\niris_renamed = iris.rename(columns={'sepal length (cm)': 'Sepal_Length'})\niris_renamed.head()\n\n\niris %&gt;% rename(Sepal_Length = Sepal.Length) %&gt;% head()\n\n\n\n\n\niris_filtered = (\n    iris[iris['target'] != 0]\n    .assign(Sepal.Area = lambda df: df['sepal length (cm)'] * df['sepal width (cm)'])\n    .groupby('target')\n    .agg(mean_area = ('Sepal.Area', 'mean'))\n)\niris_filtered\n\n\niris %&gt;%\n  filter(Species != \"setosa\") %&gt;%\n  mutate(Sepal.Area = Sepal.Length * Sepal.Width) %&gt;%\n  group_by(Species) %&gt;%\n  summarise(mean_area = mean(Sepal.Area))"
  },
  {
    "objectID": "index.html#comparando-linguagens",
    "href": "index.html#comparando-linguagens",
    "title": "Bem-vindo ao curso",
    "section": "",
    "text": "Antes de começar…\nEste documento tem como objetivo oferecer uma comparação prática entre duas das bibliotecas mais populares para manipulação de dados: pandas em Python e tidyverse em R. Utilizando o dataset clássico Iris, são apresentadas operações fundamentais de ciência de dados em ambas as linguagens, organizadas de forma paralela.\nA proposta não é apenas mostrar como realizar tarefas específicas, mas também facilitar a transferência de conhecimento entre linguagens. Muitas vezes, cientistas de dados e pesquisadores se deparam com a necessidade de migrar seus fluxos de trabalho entre R e Python (ou vice-versa), seja por demanda de projetos colaborativos, requisitos institucionais ou preferência da equipe técnica.\nAo intercalar cada operação com sua respectiva implementação em R e Python, o leitor pode compreender como os conceitos se traduzem entre os ecossistemas. Essa estrutura favorece o aprendizado comparado e reforça a capacidade de raciocínio lógico ao destacar diferenças e semelhanças de sintaxe e paradigma entre as duas abordagens.\nEste material pode ser útil tanto para iniciantes quanto para usuários intermediários que desejam reforçar sua fluência em múltiplas linguagens de análise de dados."
  },
  {
    "objectID": "index.html#carregar-os-dados",
    "href": "index.html#carregar-os-dados",
    "title": "Bem-vindo ao curso",
    "section": "",
    "text": "import pandas as pd\nfrom sklearn.datasets import load_iris\n\niris_data = load_iris(as_frame=True)\niris = iris_data.frame\n\n\nlibrary(tidyverse)\ndata(iris)"
  },
  {
    "objectID": "index.html#visualizar-as-primeiras-linhas",
    "href": "index.html#visualizar-as-primeiras-linhas",
    "title": "Bem-vindo ao curso",
    "section": "",
    "text": "iris.head()\n\n\nhead(iris)"
  },
  {
    "objectID": "index.html#filtrar-linhas-ex-apenas-setosa",
    "href": "index.html#filtrar-linhas-ex-apenas-setosa",
    "title": "Bem-vindo ao curso",
    "section": "",
    "text": "iris_setosa = iris[iris['target'] == 0]\niris_setosa.head()\n\n\niris %&gt;% filter(Species == \"setosa\")"
  },
  {
    "objectID": "index.html#selecionar-colunas",
    "href": "index.html#selecionar-colunas",
    "title": "Bem-vindo ao curso",
    "section": "",
    "text": "iris_selected = iris[['sepal length (cm)', 'target']]\niris_selected.head()\n\n\niris %&gt;% select(Sepal.Length, Species)"
  },
  {
    "objectID": "index.html#criar-nova-coluna-sepal.area",
    "href": "index.html#criar-nova-coluna-sepal.area",
    "title": "Bem-vindo ao curso",
    "section": "",
    "text": "iris['Sepal.Area'] = iris['sepal length (cm)'] * iris['sepal width (cm)']\niris[['Sepal.Area']].head()\n\n\niris &lt;- iris %&gt;% mutate(Sepal.Area = Sepal.Length * Sepal.Width)\niris %&gt;% select(Sepal.Area) %&gt;% head()"
  },
  {
    "objectID": "index.html#agrupar-e-resumir-média-do-comprimento-da-sépala-por-espécie",
    "href": "index.html#agrupar-e-resumir-média-do-comprimento-da-sépala-por-espécie",
    "title": "Bem-vindo ao curso",
    "section": "",
    "text": "mean_sepal = iris.groupby('target')['sepal length (cm)'].mean()\nmean_sepal\n\n\niris %&gt;% group_by(Species) %&gt;% summarise(mean_sepal = mean(Sepal.Length))"
  },
  {
    "objectID": "index.html#ordenar-os-dados",
    "href": "index.html#ordenar-os-dados",
    "title": "Bem-vindo ao curso",
    "section": "",
    "text": "iris_sorted = iris.sort_values('sepal length (cm)', ascending=False)\niris_sorted.head()\n\n\niris %&gt;% arrange(desc(Sepal.Length)) %&gt;% head()"
  },
  {
    "objectID": "index.html#renomear-colunas",
    "href": "index.html#renomear-colunas",
    "title": "Bem-vindo ao curso",
    "section": "",
    "text": "iris_renamed = iris.rename(columns={'sepal length (cm)': 'Sepal_Length'})\niris_renamed.head()\n\n\niris %&gt;% rename(Sepal_Length = Sepal.Length) %&gt;% head()"
  },
  {
    "objectID": "index.html#pipeline-completo-filtrar-criar-coluna-e-resumir",
    "href": "index.html#pipeline-completo-filtrar-criar-coluna-e-resumir",
    "title": "Bem-vindo ao curso",
    "section": "",
    "text": "iris_filtered = (\n    iris[iris['target'] != 0]\n    .assign(Sepal.Area = lambda df: df['sepal length (cm)'] * df['sepal width (cm)'])\n    .groupby('target')\n    .agg(mean_area = ('Sepal.Area', 'mean'))\n)\niris_filtered\n\n\niris %&gt;%\n  filter(Species != \"setosa\") %&gt;%\n  mutate(Sepal.Area = Sepal.Length * Sepal.Width) %&gt;%\n  group_by(Species) %&gt;%\n  summarise(mean_area = mean(Sepal.Area))"
  },
  {
    "objectID": "material/aula02-importar.html",
    "href": "material/aula02-importar.html",
    "title": "Aula 02 – Importação de Dados com Tidyverse",
    "section": "",
    "text": "Compreender a estrutura e filosofia do tidyverse.\nReconhecer as principais ferramentas de importação de dados (readr, readxl, here).\nUtilizar funções como read_csv(), read_excel() e here() com segurança.\nInterpretar mensagens de importação e controlar encoding, separadores e tipos de colunas."
  },
  {
    "objectID": "material/aula02-importar.html#objetivos-da-aula",
    "href": "material/aula02-importar.html#objetivos-da-aula",
    "title": "Aula 02 – Importação de Dados com Tidyverse",
    "section": "",
    "text": "Compreender a estrutura e filosofia do tidyverse.\nReconhecer as principais ferramentas de importação de dados (readr, readxl, here).\nUtilizar funções como read_csv(), read_excel() e here() com segurança.\nInterpretar mensagens de importação e controlar encoding, separadores e tipos de colunas."
  },
  {
    "objectID": "material/aula02-importar.html#o-que-é-o-tidyverse",
    "href": "material/aula02-importar.html#o-que-é-o-tidyverse",
    "title": "Aula 02 – Importação de Dados com Tidyverse",
    "section": "O que é o Tidyverse?",
    "text": "O que é o Tidyverse?\nO tidyverse é uma coleção de pacotes desenvolvidos para facilitar o trabalho com dados no R. Ele oferece uma abordagem integrada e coerente para:\n\nImportar (readr, readxl, here);\nOrganizar e transformar (dplyr, tidyr);\nVisualizar (ggplot2);\nModelar e comunicar resultados (broom, rmarkdown, etc.).\n\nA proposta central do tidyverse é tornar o fluxo de trabalho mais fluido e legível — criando um “dialeto” amigável da linguagem R para análise de dados.\n\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)"
  },
  {
    "objectID": "material/aula02-importar.html#estrutura-tidy-dados-arrumados",
    "href": "material/aula02-importar.html#estrutura-tidy-dados-arrumados",
    "title": "Aula 02 – Importação de Dados com Tidyverse",
    "section": "Estrutura Tidy: Dados arrumados",
    "text": "Estrutura Tidy: Dados arrumados\nAntes de importar dados, é importante compreender a estrutura ideal de organização dos dados: os chamados dados arrumados. Essa estrutura é a base para a compatibilidade com a maioria das ferramentas do tidyverse.\nO conceito de dados arrumados (tidy dados) é definido por três regras principais:\n\nCada variável em uma coluna;\nCada observação em uma linha;\nCada célula contém apenas um valor.\n\nEsses princípios facilitam a análise, visualização e transformação dos dados ao longo do projeto."
  },
  {
    "objectID": "material/aula02-importar.html#começando-por-importar-dados",
    "href": "material/aula02-importar.html#começando-por-importar-dados",
    "title": "Aula 02 – Importação de Dados com Tidyverse",
    "section": "Começando por importar dados",
    "text": "Começando por importar dados\nCom a estrutura tidy em mente, iniciamos agora a prática de importação de dados no R. Nesta aula, abordaremos como importar arquivos .csv e .xlsx de forma organizada e reprodutível."
  },
  {
    "objectID": "material/aula02-importar.html#usando-o-pacote-here-para-caminhos-seguros",
    "href": "material/aula02-importar.html#usando-o-pacote-here-para-caminhos-seguros",
    "title": "Aula 02 – Importação de Dados com Tidyverse",
    "section": "Usando o pacote here para caminhos seguros",
    "text": "Usando o pacote here para caminhos seguros\nAntes de realizar a importação de arquivos, é essencial definir os caminhos corretamente. O pacote here nos ajuda a construir caminhos relativos ao projeto, evitando problemas comuns com setwd() e garantindo portabilidade entre sistemas.\n\ninstall.packages(\"here\")\nlibrary(here)\n\nhere::here(\"data\", \"example.csv\")"
  },
  {
    "objectID": "material/aula02-importar.html#importando-arquivos-.csv-com-readrread_csv",
    "href": "material/aula02-importar.html#importando-arquivos-.csv-com-readrread_csv",
    "title": "Aula 02 – Importação de Dados com Tidyverse",
    "section": "Importando arquivos .csv com readr::read_csv()",
    "text": "Importando arquivos .csv com readr::read_csv()\nA função read_csv() do pacote readr é uma das formas mais eficientes e seguras de importar dados delimitados por vírgulas. Ela reconhece automaticamente os tipos de colunas, permite ajustes de encoding e é altamente compatível com fluxos tidyverse.\n\ndata &lt;- read_csv(\n  here::here(\"data\", \"example.csv\"),\n  locale = readr::locale(encoding = \"UTF-8\")\n)\n\n\n\n\n\n\n\nNote\n\n\n\n📌 read_csv() identifica automaticamente os tipos de coluna, mas você pode forçar ou revisar com col_types."
  },
  {
    "objectID": "material/aula02-importar.html#importando-arquivos-.xlsx-com-readxlread_excel",
    "href": "material/aula02-importar.html#importando-arquivos-.xlsx-com-readxlread_excel",
    "title": "Aula 02 – Importação de Dados com Tidyverse",
    "section": "Importando arquivos .xlsx com readxl::read_excel()",
    "text": "Importando arquivos .xlsx com readxl::read_excel()\nPlanilhas do Excel também são comumente usadas para armazenamento de dados. O pacote readxl, parte do ecossistema tidyverse, permite importar arquivos .xlsx com facilidade.\n\ninstall.packages(\"readxl\")\n\nInstalling package into '/home/oandrefonseca/R/x86_64-pc-linux-gnu-library/4.4'\n(as 'lib' is unspecified)\n\nlibrary(readxl)\n\n\ndata &lt;- readxl::read_excel(\n  here::here(\"data\", \"example.xlsx\")\n)"
  },
  {
    "objectID": "material/aula02-importar.html#lidando-com-arquivos-.csv2-separador-e-decimal",
    "href": "material/aula02-importar.html#lidando-com-arquivos-.csv2-separador-e-decimal",
    "title": "Aula 02 – Importação de Dados com Tidyverse",
    "section": "Lidando com arquivos .csv2 (separador ; e decimal ,)",
    "text": "Lidando com arquivos .csv2 (separador ; e decimal ,)\nArquivos .csv2 são comuns em contextos brasileiros e europeus, utilizando ; como separador e , como separador decimal. O readr oferece a função read_csv2() para lidar com esse padrão.\n\ndata &lt;- readr::read_csv2(\n  here::here(\"data\", \"example_brazil.csv\")\n)"
  },
  {
    "objectID": "material/aula02-importar.html#explorando-o-conteúdo-dos-dados-importados",
    "href": "material/aula02-importar.html#explorando-o-conteúdo-dos-dados-importados",
    "title": "Aula 02 – Importação de Dados com Tidyverse",
    "section": "Explorando o conteúdo dos dados importados",
    "text": "Explorando o conteúdo dos dados importados\nApós a importação, é fundamental examinar a estrutura dos dados. As funções glimpse() e spec() permitem inspecionar rapidamente as colunas e os tipos inferidos pelo R. A função View() também pode ser usada para abrir uma visualização interativa da tabela no RStudio, semelhante a uma planilha.\n\ndplyr::glimpse(data)\nreadr::spec(data)\n\n\nView(data)\n\nUse glimpse() para uma visão geral rápida e spec() para ver a inferência de tipos feita automaticamente."
  },
  {
    "objectID": "material/aula02-importar.html#exercícios",
    "href": "material/aula02-importar.html#exercícios",
    "title": "Aula 02 – Importação de Dados com Tidyverse",
    "section": "Exercícios",
    "text": "Exercícios\n\nImporte um arquivo .csv de sua escolha com readr::read_csv() usando here().\nImporte uma planilha .xlsx usando readxl::read_excel().\nVerifique os tipos de cada coluna com spec() e glimpse().\nTeste a função read_csv2() com um arquivo brasileiro e explique a diferença."
  },
  {
    "objectID": "material/desafio02-boxplot_expressao_cancer.html",
    "href": "material/desafio02-boxplot_expressao_cancer.html",
    "title": "Desafio 02 – Gráfico de expressão em cancer",
    "section": "",
    "text": "Criar um script em R que gere um gráfico do tipo boxplot, representando a distribuição dos níveis de expressão de um gene específico entre diferentes tipos de câncer, com base nos dados fornecidos pelo Human Protein Atlas."
  },
  {
    "objectID": "material/desafio02-boxplot_expressao_cancer.html#objetivo",
    "href": "material/desafio02-boxplot_expressao_cancer.html#objetivo",
    "title": "Desafio 02 – Gráfico de expressão em cancer",
    "section": "",
    "text": "Criar um script em R que gere um gráfico do tipo boxplot, representando a distribuição dos níveis de expressão de um gene específico entre diferentes tipos de câncer, com base nos dados fornecidos pelo Human Protein Atlas."
  },
  {
    "objectID": "material/desafio02-boxplot_expressao_cancer.html#requisitos-técnicos",
    "href": "material/desafio02-boxplot_expressao_cancer.html#requisitos-técnicos",
    "title": "Desafio 02 – Gráfico de expressão em cancer",
    "section": "Requisitos Técnicos",
    "text": "Requisitos Técnicos\nUtilizar os pacotes tidyverse, especialmente ggplot2, para manipulação e visualização dos dados.\n\nUtilizar os pacotes tidyverse, especialmente ggplot2, para manipulação e visualização dos dados.\nO script deve aceitar como entrada um Ensembl Gene ID (exemplo: ENSG00000146648 para EGFR).\nA saída deve ser um boxplot, onde:\n\nO eixo X representa os tipos de câncer.\nO eixo Y representa os valores de expressão (em TPM).\nCada ponto individual pode ser visualizado com geom_jitter() para enriquecer a visualização (opcional).\n\nO gráfico deve conter título, rótulos de eixos e tema limpo (theme_minimal() ou similar).\nO script deve incluir legenda e cores diferenciadas por tipo de câncer (opcional, com fill)."
  },
  {
    "objectID": "material/desafio02-boxplot_expressao_cancer.html#instruções-para-obtenção-dos-dados",
    "href": "material/desafio02-boxplot_expressao_cancer.html#instruções-para-obtenção-dos-dados",
    "title": "Desafio 02 – Gráfico de expressão em cancer",
    "section": "Instruções para Obtenção dos Dados",
    "text": "Instruções para Obtenção dos Dados\n\nBaixe o arquivo de expressão por amostra de câncer diretamente do link: rna_cancer_sample.tsv.gz\nDescompacte o arquivo (caso necessário) e leia-o no R:"
  },
  {
    "objectID": "material/desafio02-boxplot_expressao_cancer.html#entregáveis",
    "href": "material/desafio02-boxplot_expressao_cancer.html#entregáveis",
    "title": "Desafio 02 – Gráfico de expressão em cancer",
    "section": "Entregáveis",
    "text": "Entregáveis\n\nScript R (boxplot_expressao_cancer.R) que realiza:\n\nLeitura dos dados.\nFiltragem por Ensembl Gene ID fornecido.\nGeração de boxplot com os níveis de expressão em TPM por tipo de câncer.\n\nGráfico de Exemplo (ex: EGFR_boxplot.png) exportado.\nREADME.md com instruções de uso, incluindo:\n\nInstalação dos pacotes.\nComo fornecer o gene de interesse.\nDescrição dos outputs gerados."
  },
  {
    "objectID": "material/desafio02-boxplot_expressao_cancer.html#dicas",
    "href": "material/desafio02-boxplot_expressao_cancer.html#dicas",
    "title": "Desafio 02 – Gráfico de expressão em cancer",
    "section": "Dicas",
    "text": "Dicas\n\ngeom_boxplot(): https://ggplot2.tidyverse.org/reference/geom_boxplot.html\ntheme_minimal() e outros temas: https://ggplot2.tidyverse.org/reference/ggtheme.html\ngeom_jitter() para sobreposição de pontos: https://ggplot2.tidyverse.org/reference/geom_jitter.html"
  },
  {
    "objectID": "material/aula04-transformar.html",
    "href": "material/aula04-transformar.html",
    "title": "Aula 04 – Transformar Dados com dplyr",
    "section": "",
    "text": "Utilizar funções do pacote dplyr para transformar e manipular dados.\nAplicar operações fundamentais como filter(), select(), mutate(), arrange() e summarise().\nCompreender o uso de group_by() para operações por grupos.\nEscrever fluxos de transformação com o operador pipe (%&gt;%)."
  },
  {
    "objectID": "material/aula04-transformar.html#objetivos-da-aula",
    "href": "material/aula04-transformar.html#objetivos-da-aula",
    "title": "Aula 04 – Transformar Dados com dplyr",
    "section": "",
    "text": "Utilizar funções do pacote dplyr para transformar e manipular dados.\nAplicar operações fundamentais como filter(), select(), mutate(), arrange() e summarise().\nCompreender o uso de group_by() para operações por grupos.\nEscrever fluxos de transformação com o operador pipe (%&gt;%)."
  },
  {
    "objectID": "material/aula04-transformar.html#introdução",
    "href": "material/aula04-transformar.html#introdução",
    "title": "Aula 04 – Transformar Dados com dplyr",
    "section": "Introdução",
    "text": "Introdução\nTransformar dados significa aplicar operações que mudam seu conteúdo ou estrutura — seja filtrando linhas, criando colunas, reordenando registros ou agrupando valores. O pacote dplyr oferece uma sintaxe concisa e poderosa para essas tarefas, mantendo a legibilidade e o fluxo lógico da análise."
  },
  {
    "objectID": "material/aula04-transformar.html#carregando-pacotes-necessários",
    "href": "material/aula04-transformar.html#carregando-pacotes-necessários",
    "title": "Aula 04 – Transformar Dados com dplyr",
    "section": "Carregando pacotes necessários",
    "text": "Carregando pacotes necessários\nVamos utilizar o tidyverse, que já inclui o dplyr e outros pacotes úteis para o fluxo de trabalho com dados.\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "material/aula04-transformar.html#explorando-o-conjunto-de-dados",
    "href": "material/aula04-transformar.html#explorando-o-conjunto-de-dados",
    "title": "Aula 04 – Transformar Dados com dplyr",
    "section": "Explorando o conjunto de dados",
    "text": "Explorando o conjunto de dados\nAntes de transformar, precisamos conhecer a estrutura dos dados. Vamos usar o conjunto starwars, incluso no dplyr, que contém informações sobre personagens da saga Star Wars.\n\nstarwars\nglimpse(starwars)"
  },
  {
    "objectID": "material/aula04-transformar.html#selecionando-colunas-com-select",
    "href": "material/aula04-transformar.html#selecionando-colunas-com-select",
    "title": "Aula 04 – Transformar Dados com dplyr",
    "section": "Selecionando colunas com select()",
    "text": "Selecionando colunas com select()\nSelecionamos apenas as colunas de interesse, o que é útil para focar na análise e reduzir ruído visual.\n\nstarwars %&gt;%\n  select(name, height, mass)"
  },
  {
    "objectID": "material/aula04-transformar.html#filtrando-linhas-com-filter",
    "href": "material/aula04-transformar.html#filtrando-linhas-com-filter",
    "title": "Aula 04 – Transformar Dados com dplyr",
    "section": "Filtrando linhas com filter()",
    "text": "Filtrando linhas com filter()\nFiltramos observações que atendem a uma condição lógica. Útil para trabalhar com subconjuntos dos dados.\n\nstarwars %&gt;%\n  filter(species == \"Human\")"
  },
  {
    "objectID": "material/aula04-transformar.html#criando-novas-colunas-com-mutate",
    "href": "material/aula04-transformar.html#criando-novas-colunas-com-mutate",
    "title": "Aula 04 – Transformar Dados com dplyr",
    "section": "Criando novas colunas com mutate()",
    "text": "Criando novas colunas com mutate()\nCriamos variáveis derivadas a partir das existentes.\n\nstarwars %&gt;%\n  mutate(imc = mass / (height/100)^2)  # índice de massa corporal"
  },
  {
    "objectID": "material/aula04-transformar.html#reordenando-linhas-com-arrange",
    "href": "material/aula04-transformar.html#reordenando-linhas-com-arrange",
    "title": "Aula 04 – Transformar Dados com dplyr",
    "section": "Reordenando linhas com arrange()",
    "text": "Reordenando linhas com arrange()\nOrdenamos os dados com base em uma ou mais colunas.\n\nstarwars %&gt;%\n  arrange(height)\n\nstarwars %&gt;%\n  arrange(desc(mass))"
  },
  {
    "objectID": "material/aula04-transformar.html#resumindo-dados-com-summarise-e-group_by",
    "href": "material/aula04-transformar.html#resumindo-dados-com-summarise-e-group_by",
    "title": "Aula 04 – Transformar Dados com dplyr",
    "section": "Resumindo dados com summarise() e group_by()",
    "text": "Resumindo dados com summarise() e group_by()\nAgrupamos os dados por uma variável e, em seguida, aplicamos operações de resumo.\n\nstarwars %&gt;%\n  group_by(species) %&gt;%\n  summarise(media_altura = mean(height, na.rm = TRUE))"
  },
  {
    "objectID": "material/aula04-transformar.html#combinando-tudo-em-um-fluxo",
    "href": "material/aula04-transformar.html#combinando-tudo-em-um-fluxo",
    "title": "Aula 04 – Transformar Dados com dplyr",
    "section": "Combinando tudo em um fluxo",
    "text": "Combinando tudo em um fluxo\nAs funções do dplyr podem ser encadeadas com o operador %&gt;%, criando fluxos de transformação legíveis e concisos.\n\nstarwars %&gt;%\n  filter(!is.na(mass)) %&gt;%\n  mutate(imc = mass / (height/100)^2) %&gt;%\n  group_by(species) %&gt;%\n  summarise(media_imc = mean(imc, na.rm = TRUE)) %&gt;%\n  arrange(desc(media_imc))"
  },
  {
    "objectID": "material/aula04-transformar.html#exercícios",
    "href": "material/aula04-transformar.html#exercícios",
    "title": "Aula 04 – Transformar Dados com dplyr",
    "section": "Exercícios",
    "text": "Exercícios\n\nSelecione apenas as colunas name, birth_year e species.\nFiltre apenas personagens com massa maior que 100.\nCrie uma nova coluna chamada altura_m com a altura em metros.\nAgrupe os dados por species e calcule a média da altura.\nOrdene os resultados de forma decrescente pela média da altura."
  },
  {
    "objectID": "material/aula07-comunicar.html",
    "href": "material/aula07-comunicar.html",
    "title": "Aula 07",
    "section": "",
    "text": "Em construção\nConteúdo da aula 07."
  }
]