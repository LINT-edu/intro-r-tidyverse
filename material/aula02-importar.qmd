---
title: "Aula 02 ‚Äì Importa√ß√£o de Dados com Tidyverse"
format:
  html:
    toc: true
    toc-depth: 3
execute: 
  cache: true
---

## Objetivos da Aula

- Compreender a estrutura e filosofia do tidyverse.
- Reconhecer as principais ferramentas de importa√ß√£o de dados (`readr`, `readxl`, `here`).
- Utilizar fun√ß√µes como `read_csv()`, `read_excel()` e `here()` com seguran√ßa.
- Interpretar mensagens de importa√ß√£o e controlar encoding, separadores e tipos de colunas.

## O que √© o Tidyverse?

O **tidyverse** √© uma cole√ß√£o de pacotes desenvolvidos para facilitar o trabalho com dados no R. Ele oferece uma abordagem integrada e coerente para:

- Importar (`readr`, `readxl`, `here`);
- Organizar e transformar (`dplyr`, `tidyr`);
- Visualizar (`ggplot2`);
- Modelar e comunicar resultados (`broom`, `rmarkdown`, etc.).

A proposta central do tidyverse √© tornar o fluxo de trabalho mais fluido e leg√≠vel ‚Äî criando um ‚Äúdialeto‚Äù amig√°vel da linguagem R para an√°lise de dados.

```{r}
#| eval: false

install.packages("tidyverse")
library(tidyverse)

```

## Estrutura Tidy: Dados arrumados

Antes de importar `dados`, √© importante compreender a estrutura ideal de organiza√ß√£o dos dados: os chamados **dados arrumados**. Essa estrutura √© a base para a compatibilidade com a maioria das ferramentas do tidyverse.

O conceito de **dados arrumados (tidy dados)** √© definido por tr√™s regras principais:

1. Cada vari√°vel em uma coluna;
2. Cada observa√ß√£o em uma linha;
3. Cada c√©lula cont√©m apenas um valor.

Esses princ√≠pios facilitam a an√°lise, visualiza√ß√£o e transforma√ß√£o dos dados ao longo do projeto.

## Come√ßando por importar dados

Com a estrutura tidy em mente, iniciamos agora a pr√°tica de **importa√ß√£o de dados** no R. Nesta aula, abordaremos como importar arquivos `.csv` e `.xlsx` de forma organizada e reprodut√≠vel.

## Usando o pacote `here` para caminhos seguros

Antes de realizar a importa√ß√£o de arquivos, √© essencial definir os caminhos corretamente. O pacote `here` nos ajuda a construir caminhos relativos ao projeto, evitando problemas comuns com `setwd()` e garantindo portabilidade entre sistemas.

```{r}
#| eval: false

install.packages("here")
library(here)

here::here("data", "example.csv")

```

## Importando arquivos `.csv` com `readr::read_csv()`

A fun√ß√£o `read_csv()` do pacote `readr` √© uma das formas mais eficientes e seguras de importar dados delimitados por v√≠rgulas. Ela reconhece automaticamente os tipos de colunas, permite ajustes de encoding e √© altamente compat√≠vel com fluxos tidyverse.

```{r}
#| eval: false

data <- read_csv(
  here::here("data", "example.csv"),
  locale = readr::locale(encoding = "UTF-8")
)
```

::: callout-note
üìå `read_csv()` identifica automaticamente os tipos de coluna, mas voc√™ pode for√ßar ou revisar com `col_types`.
:::

## Importando arquivos `.xlsx` com `readxl::read_excel()`

Planilhas do Excel tamb√©m s√£o comumente usadas para armazenamento de dados. O pacote `readxl`, parte do ecossistema tidyverse, permite importar arquivos `.xlsx` com facilidade.

```{r}
#| eval: false

data <- read_excel(
  here::here("data", "example.xlsx"),
  sheet = "Plan1"
)

```

## Lidando com arquivos `.csv2` (separador `;` e decimal `,`)

Arquivos `.csv2` s√£o comuns em contextos brasileiros e europeus, utilizando `;` como separador e `,` como separador decimal. O `readr` oferece a fun√ß√£o `read_csv2()` para lidar com esse padr√£o.

```{r}
#| eval: false

data <- readr::read_csv2(
  here::here("data", "example_brazil.csv")
)

```

## Explorando o conte√∫do dos dados importados

Ap√≥s a importa√ß√£o, √© fundamental examinar a estrutura dos dados. As fun√ß√µes `glimpse()` e `spec()` permitem inspecionar rapidamente as colunas e os tipos inferidos pelo R. A fun√ß√£o `View()` tamb√©m pode ser usada para abrir uma visualiza√ß√£o interativa da tabela no RStudio, semelhante a uma planilha.

```{r}
#| eval: false

dplyr::glimpse(data)
readr::spec(data)

```

```{r}
#| eval: false
View(data)
```

Use `glimpse()` para uma vis√£o geral r√°pida e `spec()` para ver a infer√™ncia de tipos feita automaticamente.

## Exerc√≠cios

1. Importe um arquivo `.csv` de sua escolha com `readr::read_csv()` usando `here()`.
2. Importe uma planilha `.xlsx` usando `readxl::read_excel()`.
3. Verifique os tipos de cada coluna com `spec()` e `glimpse()`.
4. Teste a fun√ß√£o `read_csv2()` com um arquivo brasileiro e explique a diferen√ßa.
